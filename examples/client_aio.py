import argparse
from distutils.util import strtobool
import time
import asyncio

import amaas.grpc.aio


async def main(args):
    if args.region:
        handle = amaas.grpc.aio.init_by_region(args.region, args.api_key, args.tls, args.ca_cert)
    else:
        handle = amaas.grpc.aio.init(args.addr, args.api_key, args.tls, args.ca_cert)

    task = [asyncio.create_task(amaas.grpc.aio.scan_file(args.filename, handle))]

    s = time.perf_counter()

    result = await asyncio.gather(*task)

    elapsed = time.perf_counter() - s

    print(f"scan executed in {elapsed:0.2f} seconds.")

    await amaas.grpc.aio.quit(handle)

    return result


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument('-f', '--filename', action='store',
                        required=True, help='file to be scanned')
    parser.add_argument('-a', '--addr', action='store', default='127.0.0.1:50051', required=False,
                        help='gRPC server address and port (default 127.0.0.1:50051)')
    parser.add_argument('-r', '--region', action='store',
                        help='AMaaS service region; e.g. us-1 or dev')
    parser.add_argument('--api_key', action='store',
                        help='api key for authentication')
    parser.add_argument('--tls', type=lambda x: bool(strtobool(x)), default=True,
                        help='enable TLS gRPC ')
    parser.add_argument('--ca_cert', action='store', help='CA certificate')

    args = parser.parse_args()

    result = asyncio.run(main(args))

    print(result)
